{"version":3,"names":[],"mappings":"","sources":["range.es6.js"],"sourcesContent":["(function(name, definition) {\n    if (typeof define === 'function') { // AMD\n        define(definition);\n    } else if (typeof module !== 'undefined' && module.exports) { // Node\n        module.exports = definition();\n    } else { // Browser\n        var theModule = definition(),\n            global = this,\n            old = global[name];\n        theModule.noConflict = function() {\n            global[name] = old;\n            return theModule;\n        };\n        global[name] = theModule;\n    }\n})('Range', function() {\n    class Range {\n\n        constructor(min, max) {\n            if (arguments.length !== 2)\n                throw new Error('Wrong number of arguments');\n            if (typeof(min) !== typeof(max))\n                throw new Error('Min and max must be same type');\n            if (min > max)\n                throw new Error('Max must be greater then min');\n\n            this.min = min, this.max = max;\n        }\n\n        _switch(switchValue, stringCallback, numberCallback) {\n            switch (typeof(switchValue)) {\n                case 'string':\n                    return stringCallback(switchValue);\n                case 'number':\n                    return numberCallback(switchValue);\n                default:\n                    throw new Error(`Argument value must be ${typeof(this.min)}`);\n            }\n        }\n\n        _next(value) {\n            return this._switch(value, v => String.fromCharCode(v.charCodeAt(0) + 1), v => v + 1);\n        }\n\n        // check if this range equal to other range\n        isEqual(other) {\n            return this.min === other.min && this.max === other.max;\n        }\n\n        // check if range includes a value\n        includes(value) {\n            return this._switch(value, v => v.charCodeAt(0) >= this.min.charCodeAt(0) && v.charCodeAt(0) <= this.max.charCodeAt(0), v => v >= this.min && v <= this.max);\n        }\n\n        // make string\n        toString() {\n            return `[${this.min}..${this.max}]`;\n        }\n\n        // make array from range\n        toArray() {\n            let array = []\n            for (let tmp = this.min; tmp <= this.max; tmp = this._next(tmp))\n                array.push(tmp);\n            return array;\n        }\n\n        // iterate range like array\n        forEach(callback) {\n            for (let tmp = this.min, index = 0; tmp <= this.max; tmp = this._next(tmp), index++)\n                callback(tmp, index, this);\n            return this;\n        }\n\n        // range size\n        size() {\n            return this._switch(this.min, () => this.max.charCodeAt(0) - this.min.charCodeAt(0) + 1, () => this.max - this.min + 1);\n        }\n\n        getClass() {\n            return 'Range';\n        }\n    };\n\n    return Range;\n});"],"file":"range.es6.js"}